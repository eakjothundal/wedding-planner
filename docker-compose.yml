services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    ports:
      - ${PORT}:${PORT}
    environment:
      APP_ENV: ${APP_ENV}
      PORT: ${PORT}
      WP_DB_HOST: ${WP_DB_HOST}
      WP_DB_PORT: ${WP_DB_PORT}
      WP_DB_DATABASE: ${WP_DB_DATABASE}
      WP_DB_USERNAME: ${WP_DB_USERNAME}
      WP_DB_PASSWORD: ${WP_DB_PASSWORD}
      WP_DB_SCHEMA: ${WP_DB_SCHEMA}
    depends_on:
      wp_db:
        condition: service_healthy
    networks:
      - wedding-planner
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - 5173:5173
    networks:
      - wedding-planner
  wp_db:
    image: postgres:12.4-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${WP_DB_DATABASE}
      POSTGRES_USER: ${WP_DB_USERNAME}
      POSTGRES_PASSWORD: ${WP_DB_PASSWORD}
    ports:
      - "${WP_DB_PORT}:5432"
    volumes:
      - "wp_volume:/var/lib/postgresql/data:rw"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${WP_DB_USERNAME} -d ${WP_DB_DATABASE}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - wedding-planner

volumes:
  wp_volume:
networks:
  wedding-planner:
